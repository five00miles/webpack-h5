const path = require('path')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const TerserJSPlugin = require('terser-webpack-plugin')
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')
const projectPath = path.resolve(__dirname, '../compress')

module.exports = {
  entry: projectPath + '/main.js',
  output: {
    filename: `js/[name].min.js`,
    path: path.resolve('compress/min')
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: `css/[name].min.css`,
      path: path.resolve('compress/min')
    })
  ],
  mode: 'production',
  optimization: {
    minimizer: [
      // new TerserJSPlugin({
      //   parallel: true, // 开启多进程压缩
      //   cache: true, // 开启缓存(压缩过的不压缩)
      //   sourceMap: true,
      //   terserOptions: {
      //     compress: {
      //       drop_console: true
      //     }
      //   }
      // }),
      new OptimizeCSSAssetsPlugin({}),
    ],
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        include: projectPath,
        use: [{
          loader: MiniCssExtractPlugin.loader,
        }, 'css-loader', 'postcss-loader']
      },
      {
        test: /\.scss$/,
        use: [{
          loader: MiniCssExtractPlugin.loader,
        }, 'css-loader', 'postcss-loader', 'sass-loader']
      },
      {
        test: /\.js$/,
        include: projectPath,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              ['@babel/preset-env', {
                targets: {
                  browsers: ['ie >= 10', 'chrome >= 62']
                },
                useBuiltIns: "usage" // 按需注⼊
              }]
            ],
            plugins: [
              ['@babel/plugin-transform-runtime', {
                "corejs": { version: 3, proposals: true }
              }]
            ]
          }
        }
      },
    ]
  },
}